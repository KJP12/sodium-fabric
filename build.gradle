plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}+${getVersionMetadata()}"
group = project.maven_group

minecraft {
    refmapName = "mixins.sodium.refmap.json"
    accessWidener = file("src/main/resources/sodium.accesswidener")
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
}

if (project.use_third_party_mods) {
    repositories {
        maven { url = "https://jitpack.io" }
    }

    dependencies {
        // DataBreaker applies a number of patches to eliminate the loading of data fixers
        // This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
        modRuntime ("com.github.SuperCoder7979:databreaker:${project.databreaker_version}") {
            transitive = false
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE.txt"
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}

// Fails the build if JDK 1.8 is not being used
tasks.register('enforceJdkVersion') {
    doLast {
        def jdkVersion = JavaVersion.current()

        if (jdkVersion != JavaVersion.VERSION_1_8) {
            throw new IllegalStateException("This project must be built with JDK 1.8 (Java 8), but JDK ${jdkVersion} was found...")
        }
    }
}

// Users who know what they are doing can specify -PskipJdkVersionCheck on the command
// line to bypass this check
if (!project.hasProperty('skipJdkVersionCheck')) {
    compileJava.dependsOn(enforceJdkVersion)
}
